#!/usr/bin/python3

# local_terminal header: /usr/bin/python3
# Amarel cluster header: /miniconda3/envs/dna/bin/python

import os, math, sys, copy, argparse
import numpy as np
import pandas as pd
path   = os.getcwd()
#dbpath = '/home/rty10/Documents/databases'
dbpath = '/home/rty10/Documents/nuc_database'

sys.path.insert(0, '/home/rty10/Documents/scripts/dnaoptimization/')
from modeling.minichromosome_models import MiniChromosomeGenerator, MiniChromosome
mini_generator = MiniChromosomeGenerator(dbpath+'/ncps_curated_basepairs_v2.csv')
#mini_generator = MiniChromosomeGenerator(dbpath+'/superhelical_frame_basepairs.csv')

# --- CLI goal:
# --- python3 SCRIPT.py -ncpid             ... -cl           ... -nl       ... -bps                ... -bpf             ... -lko
# --- python3 SCRIPT.py --nuc-core-part-id ... --circle-size ... --ncp-size ... --starting-basepair ... --final-basepair ... --initial-linking-number

parser = argparse.ArgumentParser(prog="Minichromosomal Circle Generator",
                                 description="Generate a 3DNA-formatted reference frame file associated with a minichromosomal circle of DNA that attaches a nucleosome core particle of some length to a Bezier curve.\nCode Generated by Robert Young, Rutgers University, 2021\n", 
                                 epilog="Mathematics citation: TBA.\nBezier Curve Code by Abigail Watkins and Stefjord Todolli, 2020\nGenerator Code by Robert Young, Rutgers University, 2021\n")
parser.add_argument('--nuc-core-part-id', '-ncpid', action='store', 
                    type=str, required=True, dest="nuc", 
                    help="PDB ID of NCP to model.\n")
parser.add_argument('--circle-size','-cl', action='store',
                    type=int, required=True, dest="circ_len", 
                    help="Total length of circle.\n")
parser.add_argument('--ncp-size','-nl', action='store',
                    type=int, required=True, dest="nuc_len", 
                    help="Total length of NCP.\n")
parser.add_argument('--starting-basepair','-bps', action='store',
                    type=int, required=True, dest="nuc_start", 
                    help="Starting base pair of NCP. Base pair found in entry arm and should be a negative integer.\n")
parser.add_argument('--final-basepair','-bpf', action='store',
                    type=int, required=True, dest="nuc_end", 
                    help="Final base pair of NCP. Base pair found in exit arm and should be a positive integer.\n")
parser.add_argument('--initial-linking-number','-lko', action='store',
                    type=int, default=None, dest="lko", 
                    help="The relaxed linking number of circle. Must be an integer value. Formula: circle-size / 10.5 bp/turn .\n")
                    
parser.add_argument('--output-name','-o', action='store',
                    type=str, default="pcirc", dest="filename", 
                    help="Output name of parameter file (default=pcirc).\n-!- File extension has already been set to .par\n")
args= parser.parse_args()

# ---------------------------------------------------------------------------------------------------------------
def main():
    if abs(args.nuc_start)+args.nuc_end+1 == args.nuc_len:
        LK =args.lko - 3
        print("-!- "+str(args.nuc)+' ---')

        circ = mini_generator.build_minichromosome_1ncp(args.nuc, args.nuc_start, args.nuc_end, args.circ_len, lk_number=LK)
        
        outname = args.nuc+ "_n" +str(args.circ_len).zfill(3)+ "_lk"+str(LK).zfill(2)
        circ.print_reference_frames_3dna(outname+".dat")
        circ.print_step_params_3dna(outname+".par")
        circ.print_pdb_format(outname+".pdb")
        del outname

        for i in [1, 2, 3, 4, 5, 6]:
            print("-!- --- "+str(LK+i)+"--- ---")
            circ.apply_delta_lk(1)
            outname = args.nuc+ "_n" +str(args.circ_len).zfill(3)+ "_lk"+str(LK+i).zfill(2)
            circ.print_reference_frames_3dna(outname+".dat")
            circ.print_step_params_3dna(outname+".par")
            circ.print_pdb_format(outname+".pdb")
            del outname
        del circ
        print('-'*25)
# ---------------------------------------------------------------------------------------------------------------

if __name__=="__main__":
    main()
    
# ---------------------------------------------------------------------------------------------------------------
